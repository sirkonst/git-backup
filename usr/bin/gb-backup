#!/bin/bash


if [ -z "$GB_MANAGER" ] ; then
	 if [ -e ".gb.conf" ] ; then
		  . /etc/gb.conf
		  . .gb.conf
		  export GIT_DIR=${GB_ARCHIVES_DIR}
		  export GIT_WORK_TREE=${GB_BACKUP_TARGET}
	 else
		  echo "Файл конфигурации не найден"
		  exit 1
	 fi
fi

cd ${GIT_WORK_TREE}

# проверка папок архива и создание при отсутствии
__checkdir() {
	if [ ! -d ${GB_ARCHIVES_ROOT} ] ; then
		echo "Создание папки для хранения бекапа - ${GB_ARCHIVES_ROOT}"
		mkdir -p ${GB_ARCHIVES_ROOT}
	fi
}

# [$1] - сообщение об ошибке
__error() {
	 echo -n "Ошибка выполнения"
	 echo ": $1."
	 exit 1
}

_optimized() {
	 $GIT fsck
	 $GIT count-objects
	 $GIT gc
}

# удаление из бекапа файлов добавленных в исключение
_clear_excludes() {
	# отключение подстановки имен файлов по шаблону * и ?
	GLOBIGNORE="*?"

	$GIT rm -r --cached --ignore-unmatch "${GB_EXCLUDES}"
}

# обновление exclude и include правил и копии файла конфига
# TODO пока отключено
__exin_config() {
	echo -e "#exclude config\n" > ${GIT_DIR}/info/exclude

	# отключение подстановки имен файлов по шаблону * и ?
	GLOBIGNORE="*?"

	if [ -n "${GB_EXCLUDES}" ] ; then
		for x in ${GB_EXCLUDES} ; do
			echo "$x" >> ${GIT_DIR}/info/exclude
		done
		# удаление из архива исключенных файловой
		# _clear_excludes
	fi
}

# создание архива
# $1==daily - создать дневной архив и провести оптимизацию
# $1=="тег" - поменить архив тегом
_backup() {
	 NOWDATE=`date '+%Y-%m-%d'`
	 NOWDATETIME=`date '+%Y-%m-%d_%Hh%Mm'`

	 echo "Создаение архива с меткой ${NOWDATETIME}"

	 if [ ! -e "${GIT_DIR}/HEAD" ]
	 then
		__checkdir

		$GIT init
		__exin_config
		$GIT add -- ${GB_INCLUDES:-.}
	 fi

	__exin_config
	$GIT add --all ${GB_INCLUDES:-.}

	$GIT commit -a -m "${NOWDATETIME}" --quiet

	if [ "$1" == "daily" ] ; then
		echo "Архив помечен как дневной ${NOWDATE}"
		$GIT tag -a -m "${NOWDATETIME}" ${NOWDATE}
		echo "Проводится оптимизация архивного хранилища"
		_optimized
	elif [ -n "$1" ] ; then
		echo "Архив помечен тегом $1"
		$GIT tag -a -m "${NOWDATETIME}" "$1"
	fi
}

_ls() {
	 shift

	 if [ -z "$1" ] || [ -z "$2" ]
	 then
		  $GIT ls-tree  -t -r --name-only HEAD
	 else
		  $GIT ls-tree  -t -r --name-only $@
	 fi
}

# Вывод точек архивации и тегов
# $1 - вывести список тегов
_show() {
	 if [ "$1" == "tag" ] ; then
		  $GIT tag
	 else
		  echo -e "    ID \t |\tTime Point   | \t Daily Points"
		  $GIT rev-list --all --reverse --pretty=format:" %h | %Cblue%s%Creset | %d" ${ARCHIVES_BRANCH} | grep -v commit \
		  | sed 's/refs\/tags\///g' | sed 's/tag://g' | sed 's/refs\/heads\///g' | sed 's/[()]//g'
	 fi
}

## Вывод истории изменеия файла
# $1 - имя файла
_log() {
	shift
	if [ -z "$1" ]; then
		echo "Ошибка! Не задано имя файла. См. help."
		exit 1
	fi

	echo -e "    ID \t |\tTime Point   | \t Daily Points"
	$GIT rev-list --all --reverse --pretty=format:" %h | %Cblue%s%Creset | %d" ${ARCHIVES_BRANCH} -- $1 \
	| grep -v commit | sed 's/refs\/tags\///g' | sed 's/tag://g' | sed 's/refs\/heads\///g' | sed 's/[()]//g'
}

# show with relative date
# $GIT rev-list --format=" %h | %Cblue%s%Creset (%ar) | %d" ${ARCHIVES_BRANCH} | grep -v commit

# поиск хеша по временной метке (устаревшая)
# например: 2009-06-01_13h29m -> c3cbf30e98373ad10ef080e09bcad1c79257fade
# TODO: _point_to_hash может вернуть больше одной записи
# TODO: удалить функцию и заменить на __get_point()
_point_to_hash() {
	 $GIT rev-list --grep="$1" ${ARCHIVES_BRANCH}
}

# выдает точку архива из тега или записи вида '2009-06-16_17h47m'
# $1 - строка для преобразования
# -возвращается-либо-точка-архива-если-найдена-либо-HEAD-
# TODO: убрано возвращение HEAD при отсутствии
__get_point() {
	 local POINT

	 if [ -n "$1" ] ; then
		# точка восстановления из тега
		POINT=`$GIT tag | grep "$1"`
		# если тег не найдет, то точка ищется в коммитах
		if [ -z "$POINT" ] ; then
			POINT=`$GIT rev-list --all --grep="$1"`
		fi
	 fi

	 echo $POINT
}

# показывает последнии изменения в точке архивации
# $1 - точка архивации (по умолчанию последняя)
# TODO: с тега git show отображаен лишную информацию
_last() {
	shift
	POINT=$(__get_point $1)

	$GIT show --name-status --pretty=format:"Изменения в архиве '%s' [%ar]" "${POINT:-HEAD}"
}

# показать различия в архиве
_diff() {
	 shift
	 $GIT diff --name-status $@
}

# $1 - точка восстановления (по умолчанию последняя точка HEAD)
# $2,3... - файлы для восстановления
# TODO: _point_to_hash может вернуть больше одной записи
_restore_old() {
	 shift;

	 if [ -n "$1" ] ; then
		  # точка восстановления из тега
		  POINT=`$GIT tag | grep $1`
		  # если тег не найдет, то точка ищется в коммитах
		  POINT=${POINT:-$(_point_to_hash $1)}
	 fi

	 if [ -z "$POINT" ] ; then
		  POINT="HEAD"
	 else
		  hPOINT=$1
		  shift
	 fi

	 restFILES=$@
	 echo -e "Будут восстановлены файлы по метке ${hPOINT:-HEAD}: \n\t ${restFILES:-(все файлы в архиве)}"

	 echo
	 _pause "-- нажмите любую кпонку для продолжения... --"
	 echo

	 $GIT checkout -f $POINT -- $restFILES && echo "...восстановление завершено!"
}

# $1 - точка восстановления (по умолчанию последняя точка HEAD)
# $2,3... - файлы для восстановления
# TODO: _point_to_hash может вернуть больше одной записи
_restore_new() {
	 shift;

	 if [ -n "$1" ] ; then
		  POINT=$(__get_point $1)

		  if [ -z "$POINT" ] ; then
			   POINT=${POINT:-HEAD}
			   hPOINT="(последняя)" # TODO: дата последней точки
		  else
			   hPOINT=$1 # человеко понятное описание точки
			   shift # следующие параемтры это имена файлов
		  fi

		  restFILES=$@
	 else
		  POINT="HEAD"
		  hPOINT="(последняя)" # TODO: дата последней точки
	 fi

	 RESTORE_TO=${GB_BACKUP_TARGET}

	 echo -e "Будут восстановлены файлы по метке ${hPOINT}: \n\t ${restFILES:-(все файлы в архиве)}"
	 echo "В папку ${RESTORE_TO}"

	 echo
	 _pause "-- нажмите любую кпонку для продолжения... --"
	 echo

	 $GIT archive --format=tar $POINT $restFILES | tar -xvf - -C ${RESTORE_TO} || __error "ошибка восстановления файлов"
}

# git archive --format=tar b6b04bf | tar -xvf - -C /home/che-hosting/sites/che.ru/

# очистка заданного пути от файлов которых нет в архиве
# $1,2... - пути для проверки и очистки
_clean() {
	 shift
	 # список файлов на удаление
	 echo "Список файлов на удаление:"
	 $GIT clean -n -- $@
	 echo
	 _pause "-- нажмите любую кпонку для удаления файлов ... --"
	 echo
	 # удаление лишних файлов
	 $GIT clean -f -- $@
}

_pause() {
	 read -p "$@"
}

_unpack() {
	 shift
	 # $1 - куда распокавать (со шлемеп на конце)
	 # $2 - point
	 # $3 - что распокавать
	 PREF=$1
	 POINT=$2
	 shift; shift
	 echo "archive --prefix=$PREF $POINT $@ | tar xvf -"
	 #$GIT archive --prefix=$PREF $POINT $@ | tar xvf -
}

# TODO: $1 - указывает директирию где проводить сверку
_status() {
	echo "Разлиция между последним архивом и файловой системой:"
	$GIT status
}

_git() {
	 shift
	 $GIT $@
}

_help() {
	 echo "Доступные комманды: "
	 echo -e "\t backup [daily] [tag]"
	 echo -e "\t restore <point> <file|path...>"
	 echo -e "\t status"
	 echo -e "\t last [point]"
	 echo -e "\t log <path>"
	 echo -e "\t ls"
	 echo -e "\t show [tag]"
#	 echo -e "\t diff [point]{0,2} [path...]"
	 echo -e "\t optimized"
	 echo -e "\t clear_excludes"
#	 echo -e "\t gui"
}

case "$1" in
	 "backup"	)	_backup $2;;
	 "restore"	)	_restore_new $@;;
#	 "clean"	)	_clean $@;;
#	 "unpack"	)	_unpack $@;;
	 "status"	)	_status;;
	 "last"		)	_last $@;;
	 "ls"		)	_ls $@;;
	 "show"		)	_show $2;;
	 "log"		)	_log $@;;
#	 "diff"		)	_diff $@;;
#	 "gui"		)	$QGIT4;;
	 "optimized"	)	_optimized;;
	 "clear_excludes" )	_clear_excludes;;
	 "help"		)	_help;;
	 "git"		)	_git $@;;
	 *		)	_help;;
esac
